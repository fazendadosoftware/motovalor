{"version":3,"sources":["webpack:///./node_modules/@capacitor-community/sqlite/dist/esm/web.js"],"names":["CapacitorSQLiteWeb","super","arguments","this","sqliteEl","isStoreOpen","customElements","whenDefined","document","querySelector","addEventListener","event","notifyListeners","detail","Promise","resolve","reject","options","unimplemented","saveToStore","err","echo","console","log","createConnection","open","closeConnection","ret","getVersion","checkConnectionsConsistency","close","execute","executeSet","run","query","isDBExists","isDBOpen","isDatabase","isTableExists","deleteDatabase","isJsonValid","importFromJson","exportToJson","createSyncTable","setSyncDate","getSyncDate","addUpgradeStatement","copyFromAssets","getDatabaseList"],"mappings":"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","file":"js/chunk-2d238444.fbd790bd.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class CapacitorSQLiteWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.sqliteEl = null;\n        this.isStoreOpen = false;\n    }\n    async initWebStore() {\n        await customElements.whenDefined('jeep-sqlite');\n        this.sqliteEl = document.querySelector('jeep-sqlite');\n        if (this.sqliteEl != null) {\n            this.sqliteEl.addEventListener('jeepSqliteImportProgress', (event) => {\n                this.notifyListeners('sqliteImportProgressEvent', event.detail);\n            });\n            this.sqliteEl.addEventListener('jeepSqliteExportProgress', (event) => {\n                this.notifyListeners('sqliteExportProgressEvent', event.detail);\n            });\n            if (!this.isStoreOpen)\n                this.isStoreOpen = await this.sqliteEl.isStoreOpen();\n            return Promise.resolve();\n        }\n        else {\n            return Promise.reject('InitWeb: this.sqliteEl is null');\n        }\n    }\n    async saveToStore(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.saveToStore(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async echo(options) {\n        if (this.sqliteEl != null) {\n            const echo = await this.sqliteEl.echo(options);\n            return echo;\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isSecretStored() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async setEncryptionSecret(options) {\n        console.log('setEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async changeEncryptionSecret(options) {\n        console.log('changeEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async createConnection(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.createConnection(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async open(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.open(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async closeConnection(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.closeConnection(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async getVersion(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.getVersion(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async checkConnectionsConsistency(options) {\n        if (this.sqliteEl != null) {\n            try {\n                const ret = await this.sqliteEl.checkConnectionsConsistency(options);\n                return Promise.resolve(ret);\n            }\n            catch (err) {\n                return Promise.reject(`${err}`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async close(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.close(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async execute(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.execute(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async executeSet(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.executeSet(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async run(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.run(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async query(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.query(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isDBExists(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.isDBExists(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isDBOpen(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.isDBOpen(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isDatabase(options) {\n        if (this.sqliteEl != null) {\n            if (!this.isStoreOpen)\n                this.isStoreOpen = await this.sqliteEl.isStoreOpen();\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.isDatabase(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isTableExists(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.isTableExists(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async deleteDatabase(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.deleteDatabase(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isJsonValid(options) {\n        if (this.sqliteEl != null) {\n            if (!this.isStoreOpen)\n                this.isStoreOpen = await this.sqliteEl.isStoreOpen();\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.isJsonValid(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async importFromJson(options) {\n        if (this.sqliteEl != null) {\n            if (!this.isStoreOpen)\n                this.isStoreOpen = await this.sqliteEl.isStoreOpen();\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.importFromJson(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async exportToJson(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.exportToJson(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async createSyncTable(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.createSyncTable(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async setSyncDate(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.setSyncDate(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async getSyncDate(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.getSyncDate(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async addUpgradeStatement(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.addUpgradeStatement(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async copyFromAssets(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.copyFromAssets(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async getDatabaseList() {\n        if (this.sqliteEl != null) {\n            if (!this.isStoreOpen)\n                this.isStoreOpen = await this.sqliteEl.isStoreOpen();\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.getDatabaseList();\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async getMigratableDbList(options) {\n        console.log('getMigratableDbList', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async addSQLiteSuffix(options) {\n        console.log('addSQLiteSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async deleteOldDatabases(options) {\n        console.log('deleteOldDatabases', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n}\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}